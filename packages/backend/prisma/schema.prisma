generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  password    String
  fcmToken    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
  notifications PushNotification[]

  @@map("users")
}

model Store {
  id          String   @id @default(uuid())
  shopifyDomain String @unique
  name        String
  description String?
  logo        String?
  categories  String[]
  accessToken String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
  promotions    Promotion[]
  webhooks      WebhookLog[]

  @@map("stores")
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  storeId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@map("subscriptions")
}

model Promotion {
  id          String    @id @default(uuid())
  storeId     String
  title       String
  description String
  image       String?
  discountCode String?
  validUntil  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("promotions")
}

model PushNotification {
  id         String               @id @default(uuid())
  userId     String
  title      String
  body       String
  data       Json?
  status     NotificationStatus   @default(PENDING)
  sentAt     DateTime?
  deliveredAt DateTime?
  clickedAt  DateTime?
  createdAt  DateTime             @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_notifications")
}

model WebhookLog {
  id        String      @id @default(uuid())
  storeId   String
  topic     String
  payload   Json
  processed Boolean     @default(false)
  error     String?
  createdAt DateTime    @default(now())

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("webhook_logs")
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}